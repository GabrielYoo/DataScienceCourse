Regularized Regression
Ridge regression
  Large coefficients can lead to overfitting
  Penalizing large coefficients:Regularization
  Loss function = OLS loss function
  Alpha: Parameter we need to choose
  Picking alpha here is similar to picking k in k-NN
  Hyperparameter tuning
  Alpha controls model complexity
    alpha=0:We get back OLS(can lead to overfitting)
    Very high alpha: can lead to underfitting
  When building regression models,  Ridge regression should be a first choice.
  The sum of the squared values of the coeffcients multiplied by some alpha = L2

def display_plot(cv_scores, cv_scores_std):
    fig = plt.figure()
    ax = fig.add_subplot(1,1,1)
    ax.plot(alpha_space, cv_scores)

    std_error = cv_scores_std / np.sqrt(10)

    ax.fill_between(alpha_space, cv_scores + std_error, cv_scores - std_error, alpha=0.2)
    ax.set_ylabel('CV Score +/- Std Error')
    ax.set_xlabel('Alpha')
    ax.axhline(np.max(cv_scores), linestyle='--', color='.5')
    ax.set_xlim([alpha_space[0], alpha_space[-1]])
    ax.set_xscale('log')
    plt.show()

Tune model by chaning alpha
# Import necessary modules
from sklearn.linear_model import Ridge
from sklearn.model_selection import cross_val_score

# Setup the array of alphas and lists to store scores
alpha_space = np.logspace(-4, 0, 50)
ridge_scores = []
ridge_scores_std = []

# Create a ridge regressor: ridge
ridge = Ridge(normalize=True)

# Compute scores over range of alphas
for alpha in alpha_space:

    # Specify the alpha value to use: ridge.alpha
    ridge.alpha = alpha
    
    # Perform 10-fold CV: ridge_cv_scores
    ridge_cv_scores = cross_val_score(ridge,X,y, cv=10)
    
    # Append the mean of ridge_cv_scores to ridge_scores
    ridge_scores.append(np.mean(ridge_cv_scores))
    
    # Append the std of ridge_cv_scores to ridge_scores_std
    ridge_scores_std.append(np.std(ridge_cv_scores))

# Display the plot
display_plot(ridge_scores, ridge_scores_std)
  
    
    
    
Lasso regression
  Can be used to select important features of a dataset
  shrinks the coefficent of less important features to exactly 0
  Lasso performs regularization by adding to the loss function a penalty term of the absolute value of each coefficient multiplied by some alpha. = L1 regularization
  
  
# Import Lasso
from sklearn.linear_model import Lasso
# Instantiate a lasso regressor: lasso

lasso = Lasso(alpha=0.4, normalize=True)

# Fit the regressor to the data
lasso.fit(X,y)

# Compute and print the coefficients
lasso_coef = lasso.coef_
print(lasso_coef)

# Plot the coefficients
plt.plot(range(len(df_columns)), lasso_coef)
plt.xticks(range(len(df_columns)), df_columns.values, rotation=60)
